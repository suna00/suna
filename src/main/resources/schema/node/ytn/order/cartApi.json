[
  {
    "typeId" : "apiCategory",
    "id" : "cart",
    "categoryName" : "장바구니 API"
  },
  {
    "typeId" : "apiConfig",
    "category" : "cart",
    "apiId" : "read",
    "apiName" : "장바구니 조회",
    "method" : "GET",
    "parameters" : [
    ],
    "config" : {
      "item" : {
        "select" : {
          "ds" : "ytnDevDb",
          "resultType" : "read",
          "description": "장바구니 전체 계산",
          "sql" : "SELECT o.* , (totalProductPrice + totalDeliveryPrice - totalDiscountPrice) as totalOrderPrice from ( select t.cartId, (t.totalBaseOptionPrice + t.totalAddOptionPrice) as totalProductPrice, (SELECT ifnull(sum(deliveryPrice), 0) FROM cartdeliveryprice WHERE cartId = t.cartId) AS totalDeliveryPrice, 0 AS totalDiscountPrice from ( SELECT cp.cartId, sum((ifnull(pi.addPrice, 0) + ifnull(p.salePrice, 0)) * cp.quantity) AS totalBaseOptionPrice, (SELECT sum(pi.addPrice * ci.quantity) FROM cartproductitem ci, productoptionitem pi WHERE cartId = cp.cartId AND ci.addOptionItemId = pi.productOptionItemId)              AS totalAddOptionPrice FROM cartproduct cp, productoptionitem pi, product p WHERE cartId = @{cartId} AND cp.baseOptionItemId = pi.productOptionItemId AND p.productId = pi.productId ) t ) o"
        }
      },
      "referencedCartProduct" : {
        "typeId" : "cartProduct",
        "query" : [
          {"sorting" : "cartDeliveryPriceId desc,created desc"},
          {"field" : "cartId", "method" : "matching", "value" : "{{:cartId}}"},
          {"includeReferenced" : true, "referenceView": "baseOptionItemId, cartDeliveryPriceId"}
        ],
        "response" : {
          "cartProductId": "",
          "baseOptionItemId": "",
          "quantity": "",
          "vendorId": "",
          "cartDeliveryPriceId": "",
          "referencedCartProductItem": "",
          "calculateItem": {
            "select": {
              "ds": "ytnDevDb",
              "resultType": "read",
              "description": "장바구니상품 레벨 계산",
              "sql": "SELECT x.*, ((productPrice * quantity) + totalAddOptionPrice) AS orderPrice FROM (SELECT cp.cartProductId, cp.cartId, cp.productId, cp.quantity, cp.baseOptionItemId, pi.name                                                            AS baseOptionItemName, ifnull(pi.addPrice, 0)                                             AS baseAddPrice, ifnull(p.salePrice, 0)                                             AS salePrice, (ifnull(pi.addPrice, 0) + ifnull(p.salePrice, 0))                  AS productPrice, ifnull((SELECT sum(pi.addPrice * ci.quantity) FROM cartproductitem ci, productoptionitem pi WHERE cartId = cp.cartId and ci.cartProductId = cp.cartProductId AND ci.addOptionItemId = pi.productOptionItemId), 0) AS totalAddOptionPrice FROM cartproduct cp, productoptionitem pi, product p WHERE pi.productOptionItemId = cp.baseOptionItemId AND p.productId = pi.productId AND cp.cartProductId = @{cartProductId}) x "
            }
          }
        }
      }
    }
  },
  {
    "typeId" : "apiConfig",
    "category" : "cart",
    "apiId" : "changeQuantity",
    "apiName" : "장바구니 수량 변경",
    "method" : "GET",
    "parameters" : [
    ],
    "config" : {
      "item" : {
        "select" : {
          "ds" : "ytnDevDb",
          "resultType" : "read",
          "sql" : "select (stockQuantity >= @{quantity}) as isValid from productOptionItem where productOptionItemId = @{productOptionItemId} "
        }
      },
      "success" : {
        "typeId": "cartProduct",
        "event": "update",
        "if" : "{{:excessInt(isValid, 0)}}",
        "data": {
          "cartProductId": "{{:cartProductId}}",
          "quantity":"{{:quantity}}",
          "changed":"{{:now}}"
        }
      }
    }
  }

]